# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # server:
  #   build:
  #     context: .
  #   environment:
  #     - SECRET_KEY=$SECRET_KEY
  #     - DB_ENGINE=$DB_ENGINE
  #     - DB_DATABASE=$DB_DATABASE
  #     - DB_USERNAME=$DB_USERNAME
  #     - DB_PASSWORD=$DB_PASSWORD
  #     - DB_HOST=$DB_HOST
  #     - DB_PORT=$DB_PORT
  #   ports:
  #     - 8000:8000

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  db:
    image: mysql
    restart: always
    volumes:
      - my-db:/var/lib/mysql
      - ./docker-init-scripts:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_DATABASE=IMS_DEV
      - MYSQL_USER=$DB_USERNAME
      - MYSQL_PASSWORD=$DB_PASSWORD
      - MYSQL_ROOT_PASSWORD=$DB_ROOT_PASSWORD
      - MYSQL_HOST=$DB_HOST
      - MYSQL_PORT=$DB_PORT
    expose:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysql", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}", "-e", "SELECT 1" ]
      timeout: 20s
      retries: 10

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    restart: always
    depends_on:
      - db
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
    ports:
      - "8080:80"

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vles03_backend
    command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py ensure_adminuser && python manage.py runserver 0.0.0.0:8000"
    restart: always
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db

volumes:
  my-db:
